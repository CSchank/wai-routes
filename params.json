{"name":"Wai-routes","tagline":"Wai Routes provides typesafe URLs for Wai applications","body":"[Wai-Routes](https://ajnsit.github.io/wai-routes) [![Hackage](https://img.shields.io/badge/hackage-v0.7.3-brightgreen.svg)](https://hackage.haskell.org/package/wai-routes) [![Hackage-Deps](https://img.shields.io/hackage-deps/v/wai-routes.svg)](http://packdeps.haskellers.com/feed?needle=wai-routes) [![Build Status](https://img.shields.io/travis/ajnsit/wai-routes.svg)](https://travis-ci.org/ajnsit/wai-routes) [![Coverage Status](https://coveralls.io/repos/ajnsit/wai-routes/badge.svg?branch=master&service=github)](https://coveralls.io/github/ajnsit/wai-routes?branch=master)\r\n====================================\r\n\r\nThis package provides typesafe URLs for Wai applications.\r\n\r\nFeatures\r\n==========\r\n\r\n  - Automatic generation of Route boilerplate using TH\r\n  - Easy Nested Routes\r\n  - Subsites\r\n  - General purpose Route Attributes/Annotations\r\n  - Sitewide Master datatype which is passed to all handlers\r\n    and can be used for persistent data (like DB connections)\r\n  - RouteM monad that makes it easy to compose an application\r\n    with multiple routes and middleware.\r\n  - HandlerM monad that makes it easy to build a Handler\r\n    with access to Request data and Master datatype\r\n  - Handlers can abort processing and pass control to the next\r\n    application in the wai stack\r\n  - Streaming responses\r\n\r\nThe aim is to provide a similar level of typesafe URL functionality to Wai applications as is available to Yesod applications.\r\n\r\n\r\nPerformance\r\n===========\r\n\r\nWhen it comes to performance, Wai-routes compares quite favorably with other Haskell web development micro frameworks.\r\n\r\nSee more details here - [philopon/apiary-benchmark](https://github.com/philopon/apiary-benchmark)\r\n\r\n![result](./benchmark/result-tama.png)\r\n\r\n\r\nExample Usage\r\n=============\r\n\r\nWai-routes comes with several examples in the `examples/` directory. New examples are being added regularly.\r\n\r\n**Example 1. Hello World** - [Code](examples/hello-world)\r\n\r\nA simple hello-world web app with two interlinked pages. This provides the simplest example of using routing and linking between pages with typesafe routes.\r\n\r\n**Example 2. Hello World with Subsites** - [Code](examples/subsites)\r\n\r\nSimilar functionality as the first example, but uses a hello world subsites to provide the hello world functionality. A subsite is an independently developed site that can be embedded into a parent site as long as the parent site satisfies a particular api contract. It's easy to swap out subsites for different functionality as long as the api contract remains constant.\r\n\r\n**Example 3. Using Blaze-HTML to generate HTML** - [Code](examples/blaze-html)\r\n\r\nA simple example of how to generate HTML using blaze-html combinators in your handlers.\r\n\r\n**Example 4. Using Shakespearean Templates (hamlet, cassius, lucius, julius) to generate HTML/CSS/JS** - [Code](examples/shakespeare)\r\n\r\nA simple example of how to generate HTML/CSS/JS using shakespearean templates. You can use both external and inline templates.\r\n\r\n**Example 5. Building a JSON REST Service** - [Code](examples/rest-json)\r\n\r\nProvides a simple example of how to build JSON REST services with wai-routes. Uses Aeson for JSON conversion. Note that this example just demonstrates the web facing side of the application. It doesn't permanently persist data, and is also not threadsafe. You must use a more robust data storage mechanism in production! An example of doing this with a Relational DB adapter (like persistent) is in the works.\r\n\r\n**Example 6. Stream a response** - [Code](examples/streaming-response)\r\n\r\nWai has had the ability to stream content for a long time. Now wai-routes exposes this functionality with the `stream` function. This example shows how to stream content in a handler. Note that most browsers using default settings will not show content as it is being streamed. You can use \"curl\" to observe the effect of streaming. E.g. - `curl localhost:8080` will dump the data as it is being streamed from the server.\r\n\r\n\r\nPlanned Features\r\n====================\r\n\r\nThe following features are planned for later releases -\r\n\r\n- Add support for raw network responses (see http://hackage.haskell.org/package/wai-3.0.3.0/docs/Network-Wai.html#v:responseRaw)\r\n- Development mode\r\n- Keter and Heroku support\r\n- Scaffolding\r\n- Better documentation\r\n- Tests and code coverage\r\n\r\n\r\nChangelog\r\n=========\r\n\r\n* 0.7.3 : Added 'stream' to stream responses. Added 'asContent', 'css', and 'javascript' functions.\r\n* 0.7.2 : Added 'file' to send a raw file directly, 'rawBody' and 'jsonBody' to consume request body. Refactored RouteM to add 'catchAll' and 'waiApp'.\r\n* 0.7.1 : Added 'showRouteQuery', renamed 'text' to 'plain', 'html' now accepts Text instead of ByteString\r\n* 0.7.0 : Subsites support added\r\n* 0.6.2 : Added 'maybeRoute' and 'routeAttrSet', to get information about the currently executing route\r\n* 0.6.1 : Fixed cabal and travis files\r\n* 0.6.0 : Removed dependency on yesod-routes. Updated code to compile with wai-3 and ghc-7.8, ghc-7.10\r\n* 0.5.1 : Bumped dependency upper bounds to allow text 1.*\r\n* 0.5.0 : Added raw,text,html,json helpers. Update to wai-2.1.\r\n* 0.4.1 : showRoute now returns \"/\" instead of \"\"\r\n* 0.4.0 : Wai 2 compatibility. Replaced 'liftResourceT' with 'lift'\r\n* 0.3.4 : Added 'liftResourceT' to lift a ResourceT into HandlerM\r\n* 0.3.3 : Better exports from the Network.Wai.Middleware.Routes module\r\n* 0.3.2 : Added HandlerM Monad which makes it easier to build Handlers\r\n* 0.3.1 : Removed internal 'App' synonym which only muddied the types. Added common content types for convenience.\r\n* 0.3.0 : yesod-routes 1.2 compatibility. Abstracted request data. Created `runNext` which skips to the next app in the wai stack\r\n* 0.2.4 : Put an upper bound on yesod-routes version as 1.2 breaks API compatibility\r\n* 0.2.3 : Implemented a better showRoute function. Added blaze-builder as a dependency\r\n* 0.2.2 : Fixed license information in hs and cabal files\r\n* 0.2.1 : Changed license to MIT\r\n* 0.2   : Updated functionality based on yesod-routes package\r\n* 0.1   : Intial release\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}